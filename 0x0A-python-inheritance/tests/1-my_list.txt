The 1-my_list module
====================

Using MyList.print_sorted()
----------------------------

Import module:

>>> MyList = __import__("1-my_list").MyList

___
Test Case 1: Standard list with mixed integers
>>> my_list = MyList([3, 1, 4, 1, 5, 9])
>>> my_list.print_sorted()
[1, 1, 3, 4, 5, 9]

___
Test Case 2: List with repeated numbers
>>> my_list = MyList([10, 10, 10])
>>> my_list.print_sorted()
[10, 10, 10]

___
Test Case 3: List with negative and positive integers
>>> my_list = MyList([-1, -5, 3, 2, -2])
>>> my_list.print_sorted()
[-5, -2, -1, 2, 3]

___
Test Case 4: List with a single element
>>> my_list = MyList([42])
>>> my_list.print_sorted()
[42]

___
Test Case 5: Empty list (Edge case)
>>> my_list = MyList([])
>>> my_list.print_sorted()
[]

___
Test Case 6: List already sorted in ascending order
>>> my_list = MyList([1, 2, 3, 4, 5])
>>> my_list.print_sorted()
[1, 2, 3, 4, 5]

___
Test Case 7: List sorted in descending order
>>> my_list = MyList([9, 7, 5, 3, 1])
>>> my_list.print_sorted()
[1, 3, 5, 7, 9]

___
Test Case 8: List with both 0 and positive integers
>>> my_list = MyList([0, 4, 2, 0, 3])
>>> my_list.print_sorted()
[0, 0, 2, 3, 4]

___
Test Case 9: Large list of integers
>>> my_list = MyList([1000, 500, 300, 800, 1200])
>>> my_list.print_sorted()
[300, 500, 800, 1000, 1200]

___
Test Case 10: List with all negative integers
>>> my_list = MyList([-10, -50, -30, -40])
>>> my_list.print_sorted()
[-50, -40, -30, -10]

___
Test Case 11: List with all floating numbers
>>> my_list = MyList([10.12, 10.05, 10.36, 10.045])
>>> my_list.print_sorted()
[10.045, 10.05, 10.12, 10.36]

___
Test Case 12: List with integers and floats
>>> my_list = MyList([10, 5.24, -30, 40.46])
>>> my_list.print_sorted()
[-30, 5.24, 10, 40.46]

___
Test Case 13: List with mixed types
>>> my_list = MyList([2, "John", -30, "c"])
>>> my_list.print_sorted()
Traceback (most recent call last):
	...
TypeError: '<' not supported between instances of 'str' and 'int'
